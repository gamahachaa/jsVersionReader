<?php
/**
 * Generated by Haxe 4.3.0
 * Haxe source file: src/Main.hx
 */

use \php\_Boot\HxAnon;
use \php\Boot;
use \php\Web;
use \sys\io\File;
use \haxe\Json;
use \php\_Boot\HxString;
use \haxe\ds\StringMap;
use \sys\FileSystem;

/**
 * Simple script to retrun the lateste version of the no intenet js script
 * @author bb
 */
class Main {
	/**
	 * @var int
	 */
	public $_parentLevel;
	/**
	 * @var string
	 */
	public $appDir;
	/**
	 * @var bool
	 */
	public $debug;
	/**
	 * @var string
	 */
	public $dir;
	/**
	 * @var StringMap
	 */
	public $params;
	/**
	 * @var \EReg
	 */
	public $reg;
	/**
	 * @var string[]|\Array_hx
	 */
	public $rootPath;
	/**
	 * @var string
	 */
	public $script;

	/**
	 * @return void
	 */
	public static function main () {
		#src/Main.hx:27: characters 3-23
		$m = new Main(2);
	}

	/**
	 * @param int $parentLevel
	 * 
	 * @return void
	 */
	public function __construct ($parentLevel) {
		#src/Main.hx:31: characters 3-29
		$this->_parentLevel = $parentLevel;
		#src/Main.hx:32: characters 3-27
		$this->params = Web::getParams();
		#src/Main.hx:33: characters 3-21
		$this->dir = (dirname($_SERVER["SCRIPT_FILENAME"])??'null') . "/";
		#src/Main.hx:34: characters 3-35
		$dirPathTab = HxString::split($this->dir, "/");
		#src/Main.hx:35: characters 9-20
		$this->script = "";
		#src/Main.hx:36: characters 3-79
		$this->debug = array_key_exists("debug", $this->params->data) && (($this->params->data["debug"] ?? null) === "true");
		#src/Main.hx:38: lines 38-61
		if (array_key_exists("scriptfile", $this->params->data)) {
			#src/Main.hx:40: characters 4-56
			$this->rootPath = $dirPathTab->slice(0, $dirPathTab->length - 3);
			#src/Main.hx:41: characters 4-43
			$this->script = ($this->params->data["scriptfile"] ?? null);
			#src/Main.hx:42: characters 4-25
			$_this = $this->rootPath;
			$_this->arr[$_this->length++] = $this->script;
			#src/Main.hx:43: characters 4-31
			$this->appDir = $this->rootPath->join("/");
			#src/Main.hx:44: lines 44-55
			if (!array_key_exists("assetsVersion", $this->params->data)) {
				#src/Main.hx:46: characters 5-35
				echo(\Std::string($this->listMatchingFiles()));
			} else {
				#src/Main.hx:48: characters 5-45
				$scriptVersion = $this->listMatchingFiles();
				#src/Main.hx:49: characters 5-50
				$assetsVersion = $this->getCurrentAssetVersion();
				#src/Main.hx:50: lines 50-54
				echo(\Std::string(Json::phpJsonEncode(new HxAnon([
					"scriptVersion" => $scriptVersion,
					"assetsVersion" => $assetsVersion,
				]), null, null)));
			}
		} else {
			#src/Main.hx:59: characters 4-38
			echo("scriptfile is unknown");
		}
	}

	/**
	 * @return string
	 */
	public function getCurrentAssetVersion () {
		#src/Main.hx:67: characters 3-60
		$configPath = ($this->appDir??'null') . "/assets/data/dev_config.json";
		#src/Main.hx:68: characters 7-36
		clearstatcache(true, $configPath);
		#src/Main.hx:68: lines 68-73
		if (file_exists($configPath)) {
			#src/Main.hx:70: characters 5-72
			$configFile = Json::phpJsonDecode(File::getContent($configPath));
			#src/Main.hx:71: characters 5-36
			return Boot::dynamicField($configFile, 'assetsVersion');
		} else {
			#src/Main.hx:73: characters 8-19
			return "-1";
		}
	}

	/**
	 * @return string
	 */
	public function listMatchingFiles () {
		#src/Main.hx:77: characters 3-73
		$reg = new \EReg("^" . ($this->script??'null') . "_(\\d{8}_\\d{6})(.min)?.js\$", "i");
		#src/Main.hx:78: characters 3-63
		$regTest = new \EReg("^(" . ($this->script??'null') . ")(.min)?.js\$", "i");
		#src/Main.hx:81: characters 7-32
		$path = $this->appDir;
		clearstatcache(true, $path);
		#src/Main.hx:81: lines 81-111
		if (file_exists($path)) {
			#src/Main.hx:84: characters 4-49
			$files = FileSystem::readDirectory($this->appDir);
			#src/Main.hx:87: lines 87-106
			if ($this->debug) {
				#src/Main.hx:89: lines 89-95
				$_g = 0;
				while ($_g < $files->length) {
					#src/Main.hx:89: characters 10-11
					$i = ($files->arr[$_g] ?? null);
					#src/Main.hx:89: lines 89-95
					++$_g;
					#src/Main.hx:91: lines 91-94
					if ($regTest->match($i)) {
						#src/Main.hx:93: characters 7-17
						return "0";
					}
				}
			} else {
				#src/Main.hx:99: lines 99-105
				$_g = 0;
				while ($_g < $files->length) {
					#src/Main.hx:99: characters 10-11
					$i = ($files->arr[$_g] ?? null);
					#src/Main.hx:99: lines 99-105
					++$_g;
					#src/Main.hx:101: lines 101-104
					if ($reg->match($i)) {
						#src/Main.hx:103: characters 7-28
						return $reg->matched(1);
					}
				}
			}
		} else {
			#src/Main.hx:110: characters 4-33
			return ($this->appDir??'null') . " not exists";
		}
		#src/Main.hx:113: characters 3-14
		return "-1";
	}
}

Boot::registerClass(Main::class, 'Main');
