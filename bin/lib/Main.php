<?php
/**
 * Generated by Haxe 4.1.5
 */

use \php\Boot;
use \php\Web;
use \php\_Boot\HxString;
use \haxe\ds\StringMap;
use \sys\FileSystem;

/**
 * Simple script to retrun the lateste version of the no intenet js script
 * @author bb
 */
class Main {
	/**
	 * @var int
	 */
	public $_parentLevel;
	/**
	 * @var string
	 */
	public $dir;
	/**
	 * @var StringMap
	 */
	public $params;
	/**
	 * @var \EReg
	 */
	public $reg;

	/**
	 * @return void
	 */
	public static function main () {
		#src/Main.hx:21: characters 3-23
		$m = new Main(2);
	}

	/**
	 * @param int $parentLevel
	 * 
	 * @return void
	 */
	public function __construct ($parentLevel) {
		#src/Main.hx:25: characters 3-29
		$this->_parentLevel = $parentLevel;
		#src/Main.hx:26: characters 3-27
		$this->params = Web::getParams();
		#src/Main.hx:27: characters 3-21
		$this->dir = (dirname($_SERVER["SCRIPT_FILENAME"])??'null') . "/";
		#src/Main.hx:28: characters 3-22
		$this->listMatchingFiles();
	}

	/**
	 * @return void
	 */
	public function listMatchingFiles () {
		#src/Main.hx:32: characters 3-19
		$script = "";
		#src/Main.hx:33: characters 3-35
		$dirPathTab = HxString::split($this->dir, "/");
		#src/Main.hx:34: characters 3-60
		$rootPath = $dirPathTab->slice(0, $dirPathTab->length - 3);
		#src/Main.hx:35: characters 3-79
		$debug = array_key_exists("debug", $this->params->data) && (($this->params->data["debug"] ?? null) === "true");
		#src/Main.hx:47: lines 47-56
		if (array_key_exists("scriptfile", $this->params->data)) {
			#src/Main.hx:49: characters 13-37
			$script = ($this->params->data["scriptfile"] ?? null);
			#src/Main.hx:50: characters 4-25
			$rootPath->arr[$rootPath->length++] = $script;
		} else {
			#src/Main.hx:54: characters 4-38
			echo("scriptfile is unknown");
			#src/Main.hx:55: characters 4-10
			return;
		}
		#src/Main.hx:59: characters 3-73
		$reg = new \EReg("^" . ($script??'null') . "_(\\d{8}_\\d{6})(.min)?.js\$", "i");
		#src/Main.hx:60: characters 3-63
		$regTest = new \EReg("^(" . ($script??'null') . ")(.min)?.js\$", "i");
		#src/Main.hx:61: characters 3-35
		$appDir = $rootPath->join("/");
		#src/Main.hx:63: characters 7-32
		clearstatcache(true, $appDir);
		#src/Main.hx:63: lines 63-97
		if (file_exists($appDir)) {
			#src/Main.hx:66: characters 4-49
			$files = FileSystem::readDirectory($appDir);
			#src/Main.hx:69: lines 69-92
			if ($debug) {
				#src/Main.hx:71: lines 71-79
				$_g = 0;
				while ($_g < $files->length) {
					#src/Main.hx:71: characters 10-11
					$i = ($files->arr[$_g] ?? null);
					#src/Main.hx:71: lines 71-79
					++$_g;
					#src/Main.hx:73: lines 73-78
					if ($regTest->match($i)) {
						#src/Main.hx:75: characters 7-21
						echo("0");
						#src/Main.hx:77: characters 7-13
						return;
					}
				}
			} else {
				#src/Main.hx:83: lines 83-91
				$_g = 0;
				while ($_g < $files->length) {
					#src/Main.hx:83: characters 10-11
					$i = ($files->arr[$_g] ?? null);
					#src/Main.hx:83: lines 83-91
					++$_g;
					#src/Main.hx:85: lines 85-90
					if ($reg->match($i)) {
						#src/Main.hx:87: characters 7-32
						echo(\Std::string($reg->matched(1)));
						#src/Main.hx:89: characters 7-13
						return;
					}
				}
			}
		} else {
			#src/Main.hx:96: characters 4-37
			echo(\Std::string(($appDir??'null') . " not exists"));
		}
		#src/Main.hx:99: characters 3-18
		echo("-1");
	}
}

Boot::registerClass(Main::class, 'Main');
